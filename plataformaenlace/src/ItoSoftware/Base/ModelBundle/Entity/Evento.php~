<?php

namespace ItoSoftware\Base\ModelBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use SamJ\DoctrineSluggableBundle\SluggableInterface;
use Utilities\ApplicationBoot;
/**
 * Evento
 */
class Evento implements SluggableInterface {
    //--------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------
    //ADICIONES
    //
    public function getViewImage() {
        if ($this->getFoto()) {
            return $this->getUploadDir() . '/' . $this->getFoto();
        } else {
            return null;
        }
    }

    public function setViewImage($value) {
        
    }
    const UPLOAD_DIR = "/uploads/evento";

    public function upload() {
        // the file property can be empty if the field is not required
        if (null === $this->getFoto()) {
            return;
        }
        
        $basepath = ApplicationBoot::getContainer()->get('kernel')->getRootDir() . '/../web/';
        $nombre_archivo = $this->obtenerNuevoNombreArchivo($this->getFoto()->getClientOriginalName());
        // we use the original file name here but you should
        // sanitize it at least to avoid any security issues
        // move takes the target directory and target filename as params
        
        
        $this->getFoto()->move($this->getUploadRootDir($basepath), $nombre_archivo);
        
        // set the path property to the filename where you've saved the file
        $this->setFoto($nombre_archivo);
    }
    
    public function obtenerNuevoNombreArchivo($nombre_original) {
        $nombre_archivo_array = explode('.', $nombre_original);
        $extension_archivo = $nombre_archivo_array[count($nombre_archivo_array) - 1];
        $nombre_picture = rand(1, 9999) . '_picture_' . date('YmsHis') . '.' . $extension_archivo;
        return $nombre_picture;
    }
    protected function getUploadRootDir() {
        // the absolute directory path where uploaded documents should be saved
        $basepath = ApplicationBoot::getContainer()->get('kernel')->getRootDir() . '/../web/';
        return $basepath . $this->getUploadDir();
    }

    protected function getUploadDir() {
        // get rid of the __DIR__ so it doesn't screw when displaying uploaded doc/image in the view.
        return self::UPLOAD_DIR;
    }
    //--------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------
    //FUNCIONES MODIFICADAS

    /**
     * @ORM\PrePersist
     */
    public function setCreatedAtValue() {
        $this->activo = true;
        $this->created_at = new \DateTime();
        $this->updated_at = new \DateTime();
    }

    /**
     * @ORM\PreUpdate
     */
    public function setUpdatedAtValue() {
        $this->updated_at = new \DateTime();
    }
    
    public function __toString() {
        return $this->getNombre();
    }


    public function setSlug($slug) {
        if (!empty($this->slug))
            return false;
        $this->slug = $slug;
    }

    public function getSlugFields() {
        return $this->getNombre();
    }
//    ******************************************************************************************
//    ****MODIFICACIONES
//    ******************************************************************************************    

    /**
     * @var string
     */
    private $foto;
    /**
     * @var string
     */
    private $nombre;

    /**
     * @var string
     */
    private $descripcion;

    /**
     * @var \DateTime
     */
    private $fecha;

    /**
     * @var \DateTime
     */
    private $created_at;

    /**
     * @var \DateTime
     */
    private $updated_at;

    /**
     * @var integer
     */
    private $id;

    /**
     * @var \ItoSoftware\Base\ModelBundle\Entity\CategoriaDanza
     */
    private $categoria_danza;
/**
     * Set foto
     *
     * @param string $foto
     * @return Noticia
     */
    public function setFoto($foto)
    {
        $this->foto = $foto;

        return $this;
    }

    /**
     * Get foto
     *
     * @return string 
     */
    public function getFoto()
    {
        return $this->foto;
    }


    /**
     * Set nombre
     *
     * @param string $nombre
     * @return Evento
     */
    public function setNombre($nombre)
    {
        $this->nombre = $nombre;

        return $this;
    }

    /**
     * Get nombre
     *
     * @return string 
     */
    public function getNombre()
    {
        return $this->nombre;
    }

    /**
     * Set descripcion
     *
     * @param string $descripcion
     * @return Evento
     */
    public function setDescripcion($descripcion)
    {
        $this->descripcion = $descripcion;

        return $this;
    }

    /**
     * Get descripcion
     *
     * @return string 
     */
    public function getDescripcion()
    {
        return $this->descripcion;
    }

    /**
     * Set fecha
     *
     * @param \DateTime $fecha
     * @return Evento
     */
    public function setFecha($fecha)
    {
        $this->fecha = $fecha;

        return $this;
    }

    /**
     * Get fecha
     *
     * @return \DateTime 
     */
    public function getFecha()
    {
        return $this->fecha;
    }

    /**
     * Set created_at
     *
     * @param \DateTime $createdAt
     * @return Evento
     */
    public function setCreatedAt($createdAt)
    {
        $this->created_at = $createdAt;

        return $this;
    }

    /**
     * Get created_at
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Set updated_at
     *
     * @param \DateTime $updatedAt
     * @return Evento
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updated_at = $updatedAt;

        return $this;
    }

    /**
     * Get updated_at
     *
     * @return \DateTime 
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set categoria_danza
     *
     * @param \ItoSoftware\Base\ModelBundle\Entity\CategoriaDanza $categoriaDanza
     * @return Evento
     */
    public function setCategoriaDanza(\ItoSoftware\Base\ModelBundle\Entity\CategoriaDanza $categoriaDanza = null)
    {
        $this->categoria_danza = $categoriaDanza;

        return $this;
    }

    /**
     * Get categoria_danza
     *
     * @return \ItoSoftware\Base\ModelBundle\Entity\CategoriaDanza 
     */
    public function getCategoriaDanza()
    {
        return $this->categoria_danza;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $comentarios;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->comentarios = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add comentarios
     *
     * @param \ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentarios
     * @return Evento
     */
    public function addComentario(\ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentarios)
    {
        $this->comentarios[] = $comentarios;

        return $this;
    }

    /**
     * Remove comentarios
     *
     * @param \ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentarios
     */
    public function removeComentario(\ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentarios)
    {
        $this->comentarios->removeElement($comentarios);
    }

    /**
     * Get comentarios
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getComentarios()
    {
        return $this->comentarios;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $comentarios_evento;


    /**
     * Add comentarios_evento
     *
     * @param \ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentariosEvento
     * @return Evento
     */
    public function addComentariosEvento(\ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentariosEvento)
    {
        $this->comentarios_evento[] = $comentariosEvento;

        return $this;
    }

    /**
     * Remove comentarios_evento
     *
     * @param \ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentariosEvento
     */
    public function removeComentariosEvento(\ItoSoftware\Base\ModelBundle\Entity\ComentarioEvento $comentariosEvento)
    {
        $this->comentarios_evento->removeElement($comentariosEvento);
    }

    /**
     * Get comentarios_evento
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getComentariosEvento()
    {
        return $this->comentarios_evento;
    }
    /**
     * @var string
     */
    private $slug;


    /**
     * Get slug
     *
     * @return string 
     */
    public function getSlug()
    {
        return $this->slug;
    }
}
